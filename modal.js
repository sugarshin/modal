// Generated by CoffeeScript 1.8.0
(function() {
  var $, EventEmitter2, Modal, inherits;

  $ = require('jquery');

  inherits = require('inherits');

  EventEmitter2 = require('eventemitter2').EventEmitter2;

  Modal = (function() {
    "use strict";
    var _anyOpened;

    inherits(Modal, EventEmitter2);

    _anyOpened = false;

    Modal.isAnyOpened = function() {
      return _anyOpened;
    };

    Modal.prototype._defaults = {
      wrapper: '.js-modal-wrapper',
      open: '.js-modal-open',
      close: '.js-modal-close',
      toggle: '.js-modal-toggle',
      type: '',
      isOpen: false
    };

    function Modal(opts) {
      EventEmitter2.call(this);
      this.opts = $.extend({}, this._defaults, opts);
      this.$wrapper = $(this.opts.wrapper);
      this.$open = $(this.opts.open);
      this.$toggle = $(this.opts.toggle);
      this.$close = $(this.opts.close);
      this.addOpenEvent();
      this.addToggleEvent();
      if (this.opts.isOpen) {
        this.open();
      }
    }

    Modal.prototype.isOpened = function() {
      return this.opts.isOpen;
    };

    Modal.prototype.render = function() {
      this.$wrapper.append(this.compiledHtml);
      return this;
    };

    Modal.prototype.open = function() {
      if (this.isOpened()) {
        return this;
      }
      this.opts.isOpen = true;
      _anyOpened = true;
      this.render();
      this.$wrapper.stop(true, true).fadeIn((function(_this) {
        return function() {
          return _this.emit('afterfadein');
        };
      })(this));
      this.emit('open');
      return this;
    };

    Modal.prototype.empty = function() {
      this.$wrapper.empty();
      return this;
    };

    Modal.prototype.close = function() {
      this.opts.isOpen = false;
      _anyOpened = false;
      this.$wrapper.stop(true, true).fadeOut((function(_this) {
        return function() {
          return _this.emit('afterfadeout');
        };
      })(this));
      this.emit('close');
      return this;
    };

    Modal.prototype.toggle = function() {
      if (this.isOpened()) {
        this.close();
      } else {
        this.open();
      }
      return this;
    };

    Modal.prototype.addOpenEvent = function() {
      this.$open.on('click.openmodal', (function(_this) {
        return function(ev) {
          ev.preventDefault();
          return _this.open().addCloseEvent();
        };
      })(this));
      return this;
    };

    Modal.prototype.addToggleEvent = function() {
      this.$toggle.on('click.togglemodal', (function(_this) {
        return function(ev) {
          ev.preventDefault();
          return _this.toggle();
        };
      })(this));
      return this;
    };

    Modal.prototype.addCloseEvent = function() {
      this.$wrapper.find(this.opts.close).on('click.closemodal', (function(_this) {
        return function(ev) {
          ev.preventDefault();
          return _this.close().empty();
        };
      })(this));
      return this;
    };

    return Modal;

  })();

  if (typeof define === 'function' && define.amd) {
    define(function() {
      return Modal;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = Modal;
  } else {
    window.Modal || (window.Modal = Modal);
  }

}).call(this);
