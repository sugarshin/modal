// Generated by CoffeeScript 1.9.0

/*!
 * @license modal
 * (c) sugarshin
 * License: MIT
 */

(function() {
  "use strict";
  var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  (function(root, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
      module.exports = factory(require('jquery'), require('events').EventEmitter);
    } else {
      root.Modal || (root.Modal = factory(root.jQuery));
    }
  })(this, function($, EventEmitter) {
    var Modal;
    return Modal = (function(_super) {
      var _$body, _anyOpend, _modalElement;

      __extends(Modal, _super);

      _$body = $(document.body);

      _modalElement = '<div class="modal-wrapper js-modal-wrapper"> <div class="modal-bg js-modal-bg"></div> <div class="modal js-modal"> <div class="modal-inner js-modal-inner"> <div class="modal-body js-modal-body"> </div> </div> </div> </div>';

      _anyOpend = false;

      Modal.setBaseElement = function(el) {
        return _modalElement = el;
      };

      Modal.isAnyOpened = function() {
        return _anyOpend;
      };

      Modal.prototype._defaults = {
        width: 640,
        height: 360,
        bodySelector: '.js-modal-body'
      };

      Modal.prototype._configure = function(el, opts) {
        this.$el = $(el);
        return this.opts = $.extend({}, this._defaults, opts);
      };

      Modal.prototype._getScrollbarWidth = function() {
        var div, scrollbarWidth;
        div = document.createElement('div');
        div.style.width = '100px';
        div.style.height = '100px';
        div.style.overflow = 'scroll';
        div.style.position = 'absolute';
        div.style.top = '-9999px';
        document.body.appendChild(div);
        scrollbarWidth = div.offsetWidth - div.clientWidth;
        document.body.removeChild(div);
        return scrollbarWidth;
      };

      function Modal(_at_el, opts) {
        this.el = _at_el;
        this._configure(this.el, opts);
        EventEmitter.call(this);
        this.evnets();
      }

      Modal.prototype.render = function(el) {
        $(this.opts.bodySelector).append(el);
        return this;
      };

      Modal.prototype.set = function(name, val) {
        return this.opts[name] = val;
      };

      Modal.prototype.open = function() {
        var scrollBarWidth;
        if (_anyOpend) {
          return;
        }
        this._opened = _anyOpend = true;
        scrollBarWidth = this._getScrollbarWidth();
        _$body.css('margin-right', scrollBarWidth).append(_modalElement).css('overflow', 'hidden');
        $('.js-modal').css({
          width: this.opts.width,
          height: this.opts.height,
          marginTop: -this.opts.height / 2,
          marginLeft: -this.opts.width / 2
        });
        this.closeEvent();
        this.emit('openmodal', this.el, this);
        return this;
      };

      Modal.prototype.close = function() {
        this._opened = _anyOpend = false;
        _$body.css({
          marginRight: 0,
          overflow: 'visible'
        });
        $(document.body.lastChild).remove();
        this.emit('closemodal', this.el, this);
        return this;
      };

      Modal.prototype.evnets = function() {
        this.$el.on('click.openmodal', (function(_this) {
          return function(ev) {
            if (ev != null) {
              if (typeof ev.preventDefault === "function") {
                ev.preventDefault();
              }
            }
            return _this.open();
          };
        })(this));
        return this;
      };

      Modal.prototype.unbind = function() {
        this.$el.off('click.openmodal');
        return this;
      };

      Modal.prototype.closeEvent = function() {
        $('.js-close-modal, .js-modal-bg').on('click.closemodal', (function(_this) {
          return function(ev) {
            if (ev != null) {
              if (typeof ev.preventDefault === "function") {
                ev.preventDefault();
              }
            }
            return _this.close();
          };
        })(this));
        return this;
      };

      return Modal;

    })(EventEmitter);
  });

}).call(this);
