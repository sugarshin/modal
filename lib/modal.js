// Generated by CoffeeScript 1.9.0

/*!
 * @license modal
 * (c) sugarshin
 * License: MIT
 */

(function() {
  "use strict";
  var EventEmitter, Modal, crel, event, objectAssign, style,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  crel = require('crel');

  event = require('component-event');

  style = require('dom-style');

  objectAssign = require('object-assign');

  module.exports = Modal = (function(_super) {
    var querySelector, _anyOpend, _baseElement, _body;

    __extends(Modal, _super);

    querySelector = document.querySelector;

    _body = document.body;

    _baseElement = crel('div', {
      'class': 'modal-wrapper js-modal-wrapper'
    }, crel('div', {
      'class': 'modal-bg js-modal-bg'
    }), crel('div', {
      'class': 'modal js-modal'
    }, crel('div', {
      'class': 'modal-inner js-modal-inner'
    }, crel('div', {
      'class': 'modal-body js-modal-body'
    }))));

    _anyOpend = false;

    Modal.setBaseElement = function(el) {
      return _baseElement = el;
    };

    Modal.isAnyOpened = function() {
      return _anyOpend;
    };

    Modal.prototype._defaults = {
      width: 640,
      height: 360,
      wrapperSelector: '.js-modal-wrapper',
      bgSelector: '.js-modal-bg',
      coreSelector: '.js-modal',
      bodySelector: '.js-modal-body',
      closeSelector: '.js-close-modal'
    };

    Modal.prototype._configure = function(opts) {
      return this.opts = objectAssign({}, this._defaults, opts);
    };

    Modal.prototype._getScrollbarWidth = function() {
      var div, scrollbarWidth;
      div = crel('div');
      style(div, {
        'width': '100px',
        'height': '100px',
        'overflow': 'scroll',
        'position': 'absolute',
        'top': '-9999px'
      });
      document.body.appendChild(div);
      scrollbarWidth = div.offsetWidth - div.clientWidth;
      document.body.removeChild(div);
      return scrollbarWidth;
    };

    Modal.prototype._remove = function(el) {
      return el.parentNode.removeChild(el);
    };

    function Modal(_at_el, opts) {
      this.el = _at_el;
      EventEmitter.call(this);
      this._configure(opts);
      this.evnets();
    }

    Modal.prototype.render = function(el) {
      querySelector(this.opts.bodySelector).append(el);
      return this;
    };

    Modal.prototype.set = function(name, val) {
      return this.opts[name] = val;
    };

    Modal.prototype.open = function() {
      var scrollBarWidth;
      if (_anyOpend) {
        return;
      }
      this._opened = _anyOpend = true;
      scrollBarWidth = this._getScrollbarWidth();
      this._normalBodyMarginRight = _body.style.marginRight;
      style(_body, 'margin-right', scrollBarWidth);
      _body.append(_baseElement);
      style(_body, 'overflow', 'hidden');
      style(querySelector(this.opts.coreSelector), {
        'width': this.opts.width,
        'height': this.opts.height,
        'margin-top': -this.opts.height / 2,
        'margin-left': -this.opts.width / 2
      });
      this.closeEvent();
      this.emit('open', this.el, this);
      return this;
    };

    Modal.prototype.close = function() {
      this._opened = _anyOpend = false;
      style(_body, {
        'margin-right': this._normalBodyMarginRight,
        'overflow': 'visible'
      });
      this._remove(querySelector(this.opts.wrapperSelector));
      this.emit('close', this.el, this);
      return this;
    };

    Modal.prototype.evnets = function() {
      event.bind(this.el, 'click', (function(_this) {
        return function(ev) {
          if (ev != null) {
            ev.preventDefault();
          }
          return _this.open();
        };
      })(this));
      return this;
    };

    Modal.prototype.unbind = function() {
      event.unbind(this.el, 'click');
      return this;
    };

    Modal.prototype.closeEvent = function() {
      var el, els, i, _i, _len;
      els = [querySelector(this.opts.closeSelector), querySelector(this.opts.bgSelector)];
      for (i = _i = 0, _len = els.length; _i < _len; i = ++_i) {
        el = els[i];
        event.bind(el, 'click', (function(_this) {
          return function(ev) {
            if (ev != null) {
              ev.preventDefault();
            }
            return _this.open();
          };
        })(this));
      }
      return this;
    };

    return Modal;

  })(EventEmitter);

}).call(this);
